#!/usr/bin/nodejs
var debug = require('debug')('my-application');
var app = require('../app');
var redis=require('redis');
var client=redis.createClient('6379','127.0.0.1');
app.set('port', process.env.PORT || 3000);
var server = app.listen(app.get('port'), function() {
  debug('Express server listening on port ' + server.address().port);
});
var sty={
    color:'#ffffff',
    fontSize:'15'
};
var theme={
     //colors: ["#DDDF0D", "#7798BF", "#55BF3B", "#DF5353", "#aaeeee", "#ff0066", "#eeaaee", "#55BF3B", "#DF5353", "#7798BF", "#aaeeee"],
     chart: { 
        backgroundColor: { 
            linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 }, 
            stops: [ [0, 'rgb(96, 96, 96)'], [1, 'rgb(16, 16, 16)'] ] 
        }, 
        borderWidth: 0, 
        borderRadius: 0, 
        plotBackgroundColor: null, 
        plotShadow: false, 
        plotBorderWidth: 0,
        options3d:{
            enabled: false,
            alpha: 10,
            beta: 25,
            depth: 70
        }
        
    },
     title: { 
        style: { 
            color: '#FFF', 
            font: '16px Lucida Grande, Lucida Sans Unicode, Verdana, Arial, Helvetica, sans-serif' 
        } 
    },
    xAxis: { 
        labels: { 
            style: { 
                color: '#999', 
                fontWeight: 'bold' 
            } 
        }, 
        title: { 
            style: { 
                color: '#AAA', 
                font: 'bold 12px Lucida Grande, Lucida Sans Unicode, Verdana, Arial, Helvetica, sans-serif' 
            } 
        } 
    }, 
    yAxis: { 
        alternateGridColor: null, 
        minorTickInterval: null, 
        gridLineColor: 'rgba(255, 255, 255, .1)', 
        minorGridLineColor: 'rgba(255,255,255,0.07)', 
        lineWidth: 0, tickWidth: 0, 
        labels: { 
            style: { 
                color: '#999', 
                fontWeight: 'bold' 
            } 
        }, 
        title: { 
            style: { 
                color: '#AAA', 
                font: 'bold 12px Lucida Grande, Lucida Sans Unicode, Verdana, Arial, Helvetica, sans-serif' 
            } 
        } 
    },
    tooltip: { 
        backgroundColor: { 
            linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 }, 
            stops: [ [0, 'rgba(96, 96, 96, .8)'], [1, 'rgba(16, 16, 16, .8)'] ] 
        }, 
        borderWidth: 0, 
        style: { 
            color: '#FFF' 
        } 
    }
};

//线性图
function pushline(){
    var payload=theme;
    payload.chart.type="line";
    payload.chart.options3d.enabled=false;
    return payload;
}
//柱状图
function pushcolumn(){
    var payload=theme;
    payload.chart.type="column";
    payload.chart.options3d.enabled=false;
    //console.log(payload);
    return payload;
}
//区域图
function pusharea(){
    var payload=theme;
    payload.chart.type="areaspline";
    payload.chart.options3d.enabled=false;
    return payload;
}
//饼状图
function pushpie(){
    var payload={};
    var tooltip= {
        pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
    };
    var plotOptions= {
        pie: {
            showInLegend: true,
            allowPointSelect: true,
            cursor: 'pointer',
            dataLabels: {
                enabled: true,
                color: '#FFF',
                connectorColor: '#FFF',
                format: '<b>{point.name}</b>: {point.percentage:.1f} %'
            }
        }
    };
    payload.chart=theme.chart;
    payload.chart.type="pie";
    payload.chart.options3d.enabled=false;
    payload.title=theme.title;
    payload.tooltip=tooltip;
    payload.plotOptions=plotOptions;
    
    return payload;
}

//pushbar
function pushbar(){
    var payload=theme;
    payload.chart.type="bar";
    payload.chart.options3d.enabled=false;
    return payload;
}

function push3dcolumn()
{
    var payload={};
    payload.chart=theme.chart;
    //console.log(theme);
    payload.chart.options3d.enabled=true;
    payload.chart.type="column";
    payload.title=theme.title;
    payload.xAxis=theme.xAxis;
    payload.yAxis=theme.yAxis;
    return payload;
}

function pushhalfpie()
{
    var payload={};
    payload.chart=theme.chart;
    payload.chart.options3d.enabled=false;
    payload.chart.type="pie";
    payload.title=theme.title;
    payload.tooltip=theme.tooltip;
    payload.plotOptions={
            pie: {
                showInLegend: true,
                dataLabels: {
                    enabled: true,
                    distance: -50,
                    style: {
                        fontWeight: 'bold',
                        color: 'white',
                        textShadow: '0px 1px 2px black'
                    }
                },
                startAngle: -90,
                endAngle: 90,
                center: ['50%', '75%']
            }
        };
        return payload;
}


var io=require('socket.io').listen(server);
io.sockets.on('connection',function(socket){
//通过socket把前端的信息推送到后台来
socket.on('chartmsg',function(data){ 
    var channelName=data.channel;//通道名字
//一下是从redis数据库推送过来的数据
    try{
    var client=redis.createClient('6379','127.0.0.1');
    client.on('error',function (error) {
        console.log(error);
    });
    client.on('ready',function  (){
        client.subscribe(channelName);
    });
    client.on('message',function  (channel,message) {
        if(channel.indexOf("pushline")>=0)
        {
            var info=JSON.parse(message);
            var payload=pushline();
            var serie=[{name:info.name,data:info.data}];
            //var xAxis={categories:info.categories};
            payload.series=serie;
            payload.xAxis.categories= info.categories;
            //将redis推送过来打数据和所有chart的信息封装好后向前端推送
            socket.emit('pushData',payload); 
        }
        if(channel.indexOf("pushcolumn")>=0)
        {
            var info=JSON.parse(message);
            var payload=pushcolumn();
            var serie=[{name:info.name,data:info.data}];
            payload.series=serie;
            payload.xAxis.categories= info.categories;
            //console.log(payload);
            socket.emit('pushData',payload);
        }
        if(channel.indexOf("pusharea")>=0)
        {
            var info=JSON.parse(message);
            var payload=pusharea();
            var serie=[{name:info.name,data:info.data}];
            payload.series=serie;
            payload.xAxis.categories= info.categories;
            socket.emit('pushData',payload);
        }
        if(channel.indexOf("pushpie")>=0)
        {
            var info=JSON.parse(message);
            var payload=pushpie();
            var serie=[info];
            payload.series=serie;
            socket.emit('pushData',payload);
        }
        if(channel.indexOf("pushbar")>=0)
        {
            var info=JSON.parse(message);
            var payload=pushbar();
            payload.series=info.series;
            payload.xAxis.categories=info.categories;
            socket.emit('pushData',payload);
        }
        if(channel.indexOf("push3dcolumn")>=0)
        {
            var info=JSON.parse(message);
            var payload=push3dcolumn();
            var serie=[{name:info.name,data:info.data}];
            payload.series=serie;
            payload.xAxis.categories=info.categories;
            socket.emit('pushData',payload);
        }
        if(channel.indexOf("pushhalfpie")>=0)
        {
            var info=JSON.parse(message);
            var serie=[info];
            var payload=pushhalfpie();
            payload.series =serie;
            socket.emit('pushData',payload);
        }
    });
}
catch(error){
    console.log(error);
}
});  
});
